import os
import subprocess
import time

# Default OREO Values
oreo={}
oreo['OnOffDuration']=120                   # Length of calibration observations in sec
oreo['OnOffDelRA']=0.0                      # Delta RA and Dec, in degrees for calibration OnOff and for Tsys observations
oreo['OnOffDelDec']=1.0
oreo['pulsarDuration']=300                  # length of pulsar observations in sec
oreo['obsDuration']=300                     # length of primary/secondary onbservations in sec
oreo['setTimeLimit']=0.75                   # Approximate length of a full sequence of observations in hours, plus a buffer
oreo['maxMoveTime']=1e10                    # when searching for sources, only use those whose move times are below this limit
oreo['numBreakSources']=999999              # when searching a large catalog, the number of objects that are above the
                                            #horizon within the specified move time that are to be considered.
oreo['solarAvoid']=10                       # solar avoidance radius in deg
oreo['lunarAvoid']=2                        # lunar avoidance radius in deg
oreo['primaryAvoidFWHM']=5                  # radius that secondary sources must lie away from a primary source, in deg.
oreo['tsysLogFile'] = "../logfileTsys.txt"  # Log file for Tsys measurements
oreo['apfLogFile'] = "../logfile.txt"    # Log file for APF measurements
oreo['tsysDur'] = 15                        # Duration for a Tsys measurement in seconds

#----------------------
# Hack as a way to determine if we're on or ofline
if GetLST() is None :
    print "You are working OFFLINE"
    oreo["online"]=False
else:
    print "Warning:  You are working ONLINE"
    oreo["online"]=True


# **** The home of the external routines needs to be established
os.chdir( "/users/rmaddale/BTL/TestSource")
execfile("/users/rmaddale/BTL/TestSource/OreoDefs.py")

rslts = popen(["/users/rmaddale/BTL/TestSource/askQuestion.tclsh"])
parseCLEO2OREO(rslts)

# Time for end of session
stopTime = float(oreo['sessionDur'])*3600 + time.time()

#-------------------------
print "Loading catalogs:", oreo['pulsarCat'], oreo['calibCat']
Catalog(oreo['pulsarCat'])
Catalog(oreo['calibCat'])

#--------------------------
print "Configuring using Exec of ", oreo["configFile"]

if oreo['online']:
    oreo['doBalance']=True
    execfile(oreo['configFile'])

oreo['doBalance']=False

#--------------------------
# Find name of calibrator with the minimum move time
#
if oreo['doCalib'] == "1":

    calSrc = popen(["/users/rmaddale/BTL/TestSource/whichSources.tclsh", "numSrcs 0 avoidCurrent 0", "catalog", oreo['calibCat'], str(oreo)])
    print "Selected calibrator:", calSrc

    checkLastPointingTsys(calSrc)

    print "Observing Calibrator", calSrc
    OnOff(calSrc,Offset('J2000', oreo['OnOffDelRA'], oreo['OnOffDelDec'], cosv=True), oreo['OnOffDuration'], '1')

#--------------------------
# Pulsar
#
if oreo['doPulsar'] == "1":

    psrSrc = popen(["/users/rmaddale/BTL/TestSource/whichSources.tclsh", "numSrcs 0 avoidCurrent 0", "catalog", oreo['pulsarCat'], str(oreo)])
    print "Selected pulsar:", psrSrc

    checkLastPointingTsys(psrSrc)

    print "Observing pulsar", psrSrc
    Track(psrSrc,None,oreo['pulsarDuration'])

# Primary and secondary sources
#
while time.time() < stopTime:

    # Find a primary source
    rslts = popen(["/users/rmaddale/BTL/TestSource/whichSources.tclsh", "numSrcs 1 avoidCurrent 0", "catalog", oreo['primaryCat'], str(oreo)])
    (primeSrcName,mt,primeSrcRa,primeSrcDec)=rslts.split()

    print "Selected primary and slewing to:", primeSrcName, primeSrcRa, primeSrcDec
    primeLoc=Location('J2000', primeSrcRa, primeSrcDec)

    checkLastPointingTsys(primeLoc)

    # Find three secondary sources
    Slew(primeLoc)
    rslts = popen(["/users/rmaddale/BTL/TestSource/whichSources.tclsh", "numSrcs 3 avoidCurrent 1", "catalog", oreo['secondaryCat'], str(oreo)])
    secondarySrcs={}
    parseSecondaries(rslts)

    print "Selected secondaries"
    for j in range(0,3):
        print "     ", j, secondarySrcs["srcName"+str(j)], secondarySrcs["srcRA"+str(j)], secondarySrcs["srcDec"+str(j)]

    # OK... do the observing (finally)
    for j in range(0,3):
        print "Primary",j+1,
        obsSource(primeSrcName,                    primeSrcRa,                    primeSrcDec,              oreo['obsDuration'])
        print "Secondary",j+1,
        obsSource(secondarySrcs["srcName"+str(j)], secondarySrcs["srcRA"+str(j)], secondarySrcs["srcDec"+str(j)], oreo['obsDuration'])

    if oreo['online']:
        print "Updating catalogs"
        p = popen(["/users/rmaddale/BTL/TestSource/updateCatalog.tclsh", primeSrcName, oreo['primaryCat'], oreo['rcvr']])
        # for j in range(0,3):
        #    p = popen(["/users/rmaddale/BTL/TestSource/updateCatalog.tclsh", secondarySrcs["srcName"+str(j)], oreo['secondaryCat'], oreo['rcvr']])

    if not oreo['online']:
        # If we are not online, then exit the while loop
        stopTime = 0

Break("Session has finished")
