import os
import subprocess
import time

# Default ORBITS Values
orbits={}
orbits['OnOffDuration']=120      # Length of calibration observations in sec
orbits['OnOffDelRA']=1.0            # Delta RA and Dec, in degrees for calibration OnOff observations
orbits['OnOffDelDec']=0.0
orbits['pulsarDuration']=300     # length of pulsar observations in sec
orbits['obsDuration']=300          # length of primary/secondary onbservations in sec
orbits['setTimeLimit']=4.*orbits['obsDuration']/3600.     # Approximate length of a full sequence of observations
orbits['maxMoveTime']=1e10   # when searching for sources, only use those whose move times are below this limit
orbits['numBreakSources']=10000   # when searching a large catalog, the number of objects that are above the 
                                                               #horizon within the specified move time that are to be considered.  10000 seems a good value.
orbits['solarAvoid']=10                  # solar avoidance radius in deg
orbits['lunarAvoid']=2                     # lunar avoidance radius in deg
orbits['primaryAvoidFWHM']=5     # radius that secondary sources must lie away from a primary source, in deg.
orbits['tsysTolerance'] = 15          # Percent difference in Tsys (between DCR and forecasted) before an error is generated.
orbits['tsysNSamps'] = 4               # Number of 200 millisec samples to average in estimating the Tsys from the DCR
orbits['tsysLogFile'] = "../logfile.txt"    # Log file for Tsys measurements

#----------------------
# Fill in orbits dictionary from what cleo returns
def parseCLEO2ORBITS( arr ):
    global orbits
    aa=arr.split()
    for j in range(0,len(aa),2):
        orbits[aa[j]]=aa[j+1]

#----------------------
# Fill in dictionary for secondary sources from what cleo returns
def parseSecondaries( arr ):
    global secondarySrcs
    aa=arr.split()
    for j in range(0,len(aa),4):
        secondarySrcs["srcName"+str(j/4)]=aa[j]
        secondarySrcs["srcRA"+str(j/4)]=aa[j+2]
        secondarySrcs["srcDec"+str(j/4)]=aa[j+3]

#----------------------
# Since primary and secondary catalogs are huge, cannot use them directly
# Instead, do everything a catlog would do: create a location object and modify 
# the M&C's source name
def obsSource( name, ra, dec, duration ):

    print "Observing ", name, ra, dec, " for ", duration, " seconds"
    SetValues('ScanCoordinator', {'source': name})
    Track(Location("J2000", ra, dec), None, duration)

#----------------------
# Wrapper for an AutoPeak(Focus) for a position near that of objName
def pntFoc( objName, doConfig ):

    global orbits

    Slew(objName)
    orbits['telPos'] = str(GetCurrentLocation("Encoder")).replace(" ","")

    if orbits['doFocus'] == "T":
        print "AutoPeakFocus", objName
        AutoPeakFocus(location=objName,balance=False)
    else:
       print "AutoPeak", objName
       AutoPeak(location=objName,balance=False)

    if orbits['online']:
        print "Updating Tsys logfile"
        p = subprocess.Popen(["logTsysPointing.tclsh", str(orbits)],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        (rslts, errP) = p.communicate()
        if errP != "":
            print errP
            Break(errP,600)

    if orbits['online'] and doConfig:
        print "Reconfiguring using:", orbits['configFile']
        Configure(orbits['configFile'],Balance=False)
        execfile(orbits['configFile'])

    Slew(objName)
     

#----------------------
# Hack as a way to determine if we're on or ofline
if GetLST() is None :
    print "You are working OFFLINE"
    orbits["online"]=False
else:
    print "Warning:  You are working ONLINE"
    orbits["online"]=True


# **** The home of the external routines needs to be esatblished
os.chdir( "/users/rmaddale/BTL/CurrentVersion")

#----------------------
# Ask the operator questions via a TCL dialog box
#
p = subprocess.Popen(["askQuestion.tclsh"],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
(rslts, errP) = p.communicate()
if errP != "":
    print "**** Error in determining receiver:", errP
    Break("**** Error in determining receiver")
else:
    parseCLEO2ORBITS(rslts)

    # Time for end of session
    stopTime = float(orbits['sessionDur'])*3600 + time.time()

    #-------------------------
    Catalog(orbits['pulsarCat'])
    Catalog(orbits['calibCat'])

    #--------------------------
    print "Configuring using:", orbits["configFile"]
    if orbits['online']:
        execfile(orbits['configFile'])

    #--------------------------
    # Find name of calibrator with the minimum move time
    #
    if orbits['doCalib'] == "1":

        Balance()
        orbits['telPos'] = str(GetCurrentLocation("Encoder")).replace(" ","")

        p = subprocess.Popen(["whichSources.tclsh", "numSrcs 0", "catalog", orbits['calibCat'], str(orbits)],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        (calSrc, errP) = p.communicate()
        if errP != "":
            print errP
            Break(errP)

        print "Selected calibrator:", calSrc

        if orbits['doPnt'] == "1":
            pntFoc(calSrc, True)
            orbits['doPnt']="0"

        OnOff(calSrc,Offset('J2000', orbits['OnOffDelRA'], orbits['OnOffDelDec'], cosv=False), orbits['OnOffDuration'], '1')

    #--------------------------
    # Pulsar
    #
    if orbits['doPulsar'] == "1":

        orbits['telPos'] = str(GetCurrentLocation("Encoder")).replace(" ","")
        p = subprocess.Popen(["whichSources.tclsh", "numSrcs 0", "catalog", orbits['pulsarCat'], str(orbits)],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        (psrSrc, errP) = p.communicate()
        if errP != "":
            print errP
            Break(errP)

        print "Selected pulsar:", psrSrc

        if orbits['doPnt'] == "1":
            pntFoc(psrSrc, True)
            doPnt="0"
        
        Track(psrSrc,None,orbits['pulsarDuration'])

    # Primary and secondary sources
    #
    while time.time() < stopTime:

        # Find a primary source
        orbits['telPos'] = str(GetCurrentLocation("Encoder")).replace(" ","")
        p = subprocess.Popen(["whichSources.tclsh", "numSrcs 1", "catalog", orbits['primaryCat'], str(orbits)],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        (rslts, errP) = p.communicate()
        if errP != "":
            print errP
            Break(errP)

        (primeSrcName,mt,primeSrcRa,primeSrcDec)=rslts.split()

        print "Selected primary:", primeSrcName, primeSrcRa, primeSrcDec

        primeLoc=Location('J2000', primeSrcRa, primeSrcDec)
        Slew(primeLoc)

        # Do we still need to point?  Or, is anothe rone needed?
        orbits['telPos'] = str(GetCurrentLocation("Encoder")).replace(" ","")
        p = subprocess.Popen(["isPointingNeeded.tclsh",str(orbits)],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        (needToPoint, errP) = p.communicate()
        if errP != "":
            print errP
            Break(errP)

        if orbits['doPnt'] == "1" or needToPoint == "1":
            pntFoc(primeLoc, True)
            doPnt="0"

        # Find three secondary sources
        p = subprocess.Popen(["whichSources.tclsh", "numSrcs 3", "catalog", orbits['secondaryCat'], str(orbits)],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
        (rslts, errP) = p.communicate()
        if errP != "":
            print errP
            Break(errP)

        secondarySrcs={}
        parseSecondaries(rslts)

        print "Selected secondaries"
        for j in range(0,3):
            print "     ", j, secondarySrcs["srcName"+str(j)], secondarySrcs["srcRA"+str(j)], secondarySrcs["srcDec"+str(j)]

        # OK... do the observing (finally)
        for j in range(0,3):
            obsSource(primeSrcName,                    primeSrcRa,                    primeSrcDec,              orbits['obsDuration'])
            obsSource(secondarySrcs["srcName"+str(j)], secondarySrcs["srcRA"+str(j)], secondarySrcs["srcDec"+str(j)], orbits['obsDuration'])

        if orbits['online']: 
            print "Updating catalogs"

            # primary source
            p = subprocess.Popen(["updateCatalog.tclsh", primeSrcName, orbits['primaryCat'], orbits['rcvr']],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
            (rslts, errP) = p.communicate()
            if errP != "":
                print errP
                Break(errP)

            # secondary sources
            for j in range(0,3):
                p = subprocess.Popen(["updateCatalog.tclsh", secondarySrcs["srcName"+str(j)], orbits['secondaryCat'], orbits['rcvr']],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                (rslts, errP) = p.communicate()
                if errP != "":
                    print errP
                    Break(errP)

        if not orbits['online']:
            # If we are not online, then exit the while loop
            stopTime = 0
