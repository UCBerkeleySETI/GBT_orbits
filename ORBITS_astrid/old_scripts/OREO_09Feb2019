import os
import subprocess
import time

# Default ORBITS Values
orbits={}
orbits['OnOffDuration']=120      # Length of calibration observations in sec
orbits['OnOffDelRA']=0.0            # Delta RA and Dec, in degrees for calibration OnOff observations
orbits['OnOffDelDec']=1.0
orbits['pulsarDuration']=300      # length of pulsar observations in sec
orbits['obsDuration']=300          # length of primary/secondary onbservations in sec
orbits['setTimeLimit']=0.25+6.*orbits['obsDuration']/3600.     # Approximate length of a full sequence of observations in hours
orbits['maxMoveTime']=1e10   # when searching for sources, only use those whose move times are below this limit
orbits['numBreakSources']=999999   # when searching a large catalog, the number of objects that are above the
                                  #horizon within the specified move time that are to be considered.  10000 seems a good value.
orbits['solarAvoid']=10                  # solar avoidance radius in deg
orbits['lunarAvoid']=2                     # lunar avoidance radius in deg
orbits['primaryAvoidFWHM']=5     # radius that secondary sources must lie away from a primary source, in deg.
orbits['apfLogFile'] = "../logfile.txt"    # Log file for APF measurements

#----------------------
# Fill in orbits dictionary from what cleo returns
def parseCLEO2ORBITS( arr ):
    global orbits
    aa=arr.split()
    for j in range(0,len(aa),2):
        orbits[aa[j]]=aa[j+1]

#----------------------
# Fill in dictionary for secondary sources from what cleo returns
def parseSecondaries( arr ):
    global secondarySrcs
    aa=arr.split()
    for j in range(0,len(aa),4):
        secondarySrcs["srcName"+str(j/4)]=aa[j]
        secondarySrcs["srcRA"+str(j/4)]=aa[j+2]
        secondarySrcs["srcDec"+str(j/4)]=aa[j+3]

#----------------------
# Since primary and secondary catalogs are huge, cannot use them directly
# Instead, do everything a catlog would do: create a location object and modify
# the M&C's source name
def obsSource( name, ra, dec, duration ):
    print "Observing ", name, ra, dec, " for ", duration, " seconds"
    SetValues('ScanCoordinator', {'source': name})
    Track(Location("J2000", ra, dec), None, duration)

#----------------------
# Wrapper for an AutoPeak(Focus) for a position near that of objName
def pntFoc( objName, doConfig ):

    global orbits

    Slew(objName)

    saveAtten()

    if orbits['doFocus'] == "T":
        print "AutoPeakFocus near", objName, " with min flux of ", float(orbits["peakMinFlux"])
        AutoPeakFocus()
    else:
        print "AutoPeak near", objName, " with min flux of ", float(orbits["peakMinFlux"])
        AutoPeak(flux=float(orbits["peakMinFlux"]))

    restoreAtten()

    if orbits['online']:
        print "Updating Tsys logfile"
        popen(["/users/rmaddale/BTL/TestSource/logTsysPointing.tclsh", str(orbits)])
        
    Break("Check Pointing",120)

    if orbits['online'] and doConfig:
        print "Reconfiguring using:", orbits['configFile']
        execfile(orbits['configFile'])


# Wrapper for calling MILK routines and handling results & errors
def popen( cmnd ):

    global orbits

    orbits['telPos'] = str(GetCurrentLocation("Encoder")).replace(" ","")
    orbits['azElPos'] = str(GetCurrentLocation("AzEl")).replace(" ","")

    cmnd.append('telPos')
    cmnd.append(orbits['telPos'])
    cmnd.append('azElPos')
    cmnd.append(orbits['azElPos'])

    p = subprocess.Popen( cmnd, stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    (rslts, errP) = p.communicate()
    if errP != "":
        print errP
        Break(errP)
    return rslts

#----------------------
# Save all current attenuator values
def saveAtten():
    global ifrAtten, crAtten, pfAtten, orbits

    ifrAtten={}
    crAtten={}
    pfAtten={}

    for i in range(1,9):
        ifrAtten["attenuator," + str(i)]=int(GetValue("IFRack","attenuator," + str(i)))
    for i in range(1,17):
        crAtten["CMAttenuator" + str(i)]=float(GetValue("ConverterRack","CMAttenuator" + str(i)))
    if orbits["rcvr"] == "RcvrPF_2":
        pfAtten["IFChannelXAttenuator"]=float(GetValue("RcvrPF_2","IFChannelXAttenuator"))
        pfAtten["IFChannelYAttenuator"]=float(GetValue("RcvrPF_2","IFChannelYAttenuator"))
    if orbits["rcvr"] == "RcvrPF_1":
        pfAtten["IFChannelAAttenuator"]=float(GetValue("RcvrPF_1","IFChannelAAttenuator"))
        pfAtten["IFChannelBAttenuator"]=float(GetValue("RcvrPF_1","IFChannelBAttenuator"))
        pfAtten["IFChannelCAttenuator"]=float(GetValue("RcvrPF_1","IFChannelCAttenuator"))
        pfAtten["IFChannelDAttenuator"]=float(GetValue("RcvrPF_1","IFChannelDAttenuator"))

#----------------------
# Restore previously saved attenuator values
def restoreAtten():
    global ifrAtten, crAtten, pfAtten, orbits
    SetValues("IFRack", ifrAtten)
    SetValues("ConverterRack", crAtten)
    if orbits["rcvr"] == "RcvrPF_1":
        SetValues("Rcvr_PF1", pfAtten)
    if orbits["rcvr"] == "RcvrPF_2":
        SetValues("Rcvr_PF2", pfAtten)

#----------------------
# Hack as a way to determine if we're on or ofline
if GetLST() is None :
    print "You are working OFFLINE"
    orbits["online"]=False
else:
    print "Warning:  You are working ONLINE"
    orbits["online"]=True


# **** The home of the external routines needs to be esatblished
os.chdir( "/users/rmaddale/BTL/TestSource")

p = subprocess.Popen(["/users/rmaddale/BTL/TestSource/askQuestion.tclsh"],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
(rslts, errP) = p.communicate()
if errP != "":
    print "**** Error in determining receiver:", errP
    Break("**** Error in determining receiver")
else:

    parseCLEO2ORBITS(rslts)

    # Time for end of session
    stopTime = float(orbits['sessionDur'])*3600 + time.time()

    #-------------------------
    print "Loading catalogs:", orbits['pulsarCat'], orbits['calibCat']
    Catalog(orbits['pulsarCat'])
    Catalog(orbits['calibCat'])



    #--------------------------
    if orbits['online'] and orbits['doConfig'] == "1":
        print "Configuring using Exec of ", orbits["configFile"]
        orbits['doBalance']=True
        execfile(orbits['configFile'])
        orbits['doBalance']=False

    #--------------------------
    # Find name of calibrator with the minimum move time
    #
    if orbits['doCalib'] == "1":

        calSrc = popen(["/users/rmaddale/BTL/TestSource/whichSources.tclsh", "numSrcs 0 avoidCurrent 0", "catalog", orbits['calibCat'], str(orbits)])
        print "Selected calibrator:", calSrc

        if orbits['doPnt'] == "1":
            pntFoc(calSrc, True)
            orbits['doPnt']="0"

        print "Observing Calibrator", calSrc
        OnOff(calSrc,Offset('J2000', orbits['OnOffDelRA'], orbits['OnOffDelDec'], cosv=False), orbits['OnOffDuration'], '1')

    #--------------------------
    # Pulsar
    #
    if orbits['doPulsar'] == "1":

        psrSrc = popen(["/users/rmaddale/BTL/TestSource/whichSources.tclsh", "numSrcs 0 avoidCurrent 0", "catalog", orbits['pulsarCat'], str(orbits)])
        print "Selected pulsar:", psrSrc

        if orbits['doPnt'] == "1":
            pntFoc(psrSrc, True)
            doPnt="0"

        print "Observing pulsar", psrSrc
        Track(psrSrc,None,orbits['pulsarDuration'])

    # Primary and secondary sources
    #
    while time.time() < stopTime:

        # Find a primary source
        rslts = popen(["/users/rmaddale/BTL/TestSource/whichSources.tclsh", "numSrcs 1 avoidCurrent 0", "catalog", orbits['primaryCat'], str(orbits)])
        (primeSrcName,mt,primeSrcRa,primeSrcDec)=rslts.split()

        print "Selected primary and slewing to:", primeSrcName, primeSrcRa, primeSrcDec
        primeLoc=Location('J2000', primeSrcRa, primeSrcDec)
        Slew(primeLoc)

        # Do we still need to point?  Or, is anothe rone needed?
        rslts = popen(["/users/rmaddale/BTL/TestSource/isPointingNeeded.tclsh",str(orbits)])
        (needToPoint,pntReason) = rslts.split()

        if orbits['doPnt'] == "1" or needToPoint == "1":
            print "Must point because too much", pntReason, "has passed since the last pointing"
            pntFoc(primeLoc, True)
            doPnt="0"

        # Find three secondary sources
        Slew(primeLoc)
        rslts = popen(["/users/rmaddale/BTL/TestSource/whichSources.tclsh", "numSrcs 3 avoidCurrent 1", "catalog", orbits['secondaryCat'], str(orbits)])
        secondarySrcs={}
        parseSecondaries(rslts)

        print "Selected secondaries"
        for j in range(0,3):
            print "     ", j, secondarySrcs["srcName"+str(j)], secondarySrcs["srcRA"+str(j)], secondarySrcs["srcDec"+str(j)]

        # OK... do the observing (finally)
        for j in range(0,3):
            print("Primary"),
            obsSource(primeSrcName,                    primeSrcRa,                    primeSrcDec,              orbits['obsDuration'])
            print("Secondary"),
            obsSource(secondarySrcs["srcName"+str(j)], secondarySrcs["srcRA"+str(j)], secondarySrcs["srcDec"+str(j)], orbits['obsDuration'])

        if orbits['online']:
            print "Updating catalogs"
            p = popen(["/users/rmaddale/BTL/TestSource/updateCatalog.tclsh", primeSrcName, orbits['primaryCat'], orbits['rcvr']])
            # for j in range(0,3):
            #    p = popen(["/users/rmaddale/BTL/TestSource/updateCatalog.tclsh", secondarySrcs["srcName"+str(j)], orbits['secondaryCat'], orbits['rcvr']])

        if not orbits['online']:
            # If we are not online, then exit the while loop
            stopTime = 0

    Break("Session has finished")
