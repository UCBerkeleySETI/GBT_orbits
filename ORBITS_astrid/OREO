import os
import subprocess
import time

# **** The home of the external routines needs to be established
execfile("/home/groups/btl/ORBITS/CurrentVersion/OrbitsDefs.py")

#----------------------
# Hack as a way to determine if we're on or offline
if GetLST() is None :
    print "You are working OFFLINE"
    orbits["online"]=False
else:
    print "Warning:  You are working ONLINE"
    orbits["online"]=True

rslts = popen(["/home/groups/btl/ORBITS/CurrentVersion/askQuestion.tclsh"])
parseCLEO2ORBITS(rslts)

# Time for end of session
# stopTime = float(orbits['sessionDur'])*3600 + time.time()
stopTime = orbits['stopTime']

#-------------------------
print "Loading catalogs:", orbits['pulsarCat'], orbits['calibCat']
Catalog(orbits['pulsarCat'])
Catalog(orbits['calibCat'])

#--------------------------
#Config

if orbits['online'] and orbits['doConfig'] == "1":
    print "Configuring using Exec of ", orbits["configFile"]
    orbits['doBalance']=True
    execfile(orbits['configFile'])
    PubBLHead("command:update_obsfreq")
   
orbits['doBalance']=False

#--------------------------
#Calibrator

if orbits['doCalib'] == "1":
    # Find name of calibrator with the minimum move time
    calSrc = popen(["/home/groups/btl/ORBITS/CurrentVersion/whichSources.tclsh", "numSrcs 0 avoidCurrent 0", "catalog", orbits['calibCat'], str(orbits)])
    print "Selected calibrator:", calSrc

    checkLastPointingTsys(calSrc)

    print "Observing Calibrator", calSrc
    PubBLHead("Observing Calibrator: "+calSrc)
    OnOff(calSrc,Offset('J2000', orbits['OnOffDelRA'], orbits['OnOffDelDec'], cosv=True), orbits['OnOffDuration'], '1')

    SetValues("ScanCoordinator",{"cal_state,1":"Noise"})
    Annotation("CALSTATE","CALON")
    Track(calSrc,None,orbits['OnOffDuration'], '1',fixedOffset=Offset('J2000', orbits['OnOffDelRA'], orbits['OnOffDelDec'], cosv=True))
    SetValues("ScanCoordinator",{"cal_state,1":"NoNoise"})
    Annotation("CALSTATE","CALOFF")

#--------------------------
# Pulsar
#          
if orbits['doPulsar'] == "1":

    psrSrc = popen(["/home/groups/btl/ORBITS/CurrentVersion/whichSources.tclsh", "numSrcs 0 avoidCurrent 0", "catalog", orbits['pulsarCat'], str(orbits)])
    print "Selected pulsar:", psrSrc

    checkLastPointingTsys(psrSrc)

    print "Observing Pulsar", psrSrc
    PubBLHead("Observing Pulsar: "+psrSrc)
    Track(psrSrc,None,orbits['pulsarDuration'])

    #Canary run.
    PubBLHead("Running canary check")
    print "Running pulsar detection check..."
    PubBLHead("command:run_canary")
    print "Sleeping for 3 minutes while analysis takes place on Breakthrough Listen backend..."
    SafeSleep(200)
    print "Continuing..."

# Primary and secondary sources
#
while time.time() < stopTime:

    # Find a primary source
    rslts = popen(["/home/groups/btl/ORBITS/CurrentVersion/whichSources.tclsh", "numSrcs 1 avoidCurrent 0", "catalog", orbits['primaryCat'], str(orbits)])
    (primeSrcName,mt,primeSrcRa,primeSrcDec)=rslts.split()

    print "Selected primary and slewing to:", primeSrcName, primeSrcRa, primeSrcDec
    primeLoc=Location('J2000', primeSrcRa, primeSrcDec)

    checkLastPointingTsys(primeLoc)

    # Find three secondary sources
    Slew(primeLoc)
    rslts = popen(["/home/groups/btl/ORBITS/CurrentVersion/whichSources.tclsh", "numSrcs 3 avoidCurrent 1", "catalog", orbits['secondaryCat'], str(orbits)])
    secondarySrcs={}
    parseSecondaries(rslts)

    print "Selected secondaries"
    for j in range(0,3):
        print "     ", j, secondarySrcs["srcName"+str(j)], secondarySrcs["srcRA"+str(j)], secondarySrcs["srcDec"+str(j)]

    # OK... do the observing (finally)
    for j in range(0,3):
        print "Primary",j+1,
        obsSource(primeSrcName,                    primeSrcRa,                    primeSrcDec,              orbits['obsDuration'])
        print "Secondary",j+1,
        obsSource(secondarySrcs["srcName"+str(j)], secondarySrcs["srcRA"+str(j)], secondarySrcs["srcDec"+str(j)], orbits['obsDuration'])

    if orbits['online']:
        print "Updating catalogs"
        p = popen(["/home/groups/btl/ORBITS/CurrentVersion/updateCatalog.tclsh", primeSrcName, orbits['primaryCat'], orbits['rcvr']])
        # for j in range(0,3):
        #    p = popen(["/home/groups/btl/ORBITS/CurrentVersion/updateCatalog.tclsh", secondarySrcs["srcName"+str(j)], orbits['secondaryCat'], orbits['rcvr']])

    if not orbits['online']:
        # If we are not online, then exit the while loop
        stopTime = 0

Break("Session has finished")
